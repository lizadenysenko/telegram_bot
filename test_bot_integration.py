import unittest
from unittest.mock import patch, MagicMock
from telebot import types
import bot  # –Ü–º–ø–æ—Ä—Ç –≤–∞—à–æ–≥–æ –±–æ—Ç–∞

class TestBotIntegration(unittest.TestCase):

    @patch('bot.requests.get')  # –ú–æ–∫–∞—î–º–æ HTTP-–∑–∞–ø–∏—Ç –¥–æ OMDb API
    def test_find_movie(self, mock_get):
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–æ–∫ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ OMDb API
        mock_response = MagicMock()
        mock_response.json.return_value = {
            "Response": "True",
            "Title": "Inception",
            "Year": "2010",
            "imdbRating": "8.8",
            "Director": "Christopher Nolan",
            "Actors": "Leonardo DiCaprio, Joseph Gordon-Levitt",
            "Genre": "Action, Sci-Fi",
            "Plot": "A thief who steals corporate secrets through the use of dream-sharing technology...",
            "Poster": "https://link_to_poster.jpg"
        }
        mock_get.return_value = mock_response

        # –°–∏–º—É–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        message = MagicMock()
        message.text = '/find Inception'
        message.from_user.id = 12345
        message.chat.id = 12345

        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É /find
        bot.find_movie(message)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –±—É–≤ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
        bot.reply_to.assert_called_with(
            message,
            "üé¨ –ù–∞–∑–≤–∞: Inception\nüìÖ –†—ñ–∫: 2010\n‚≠ê –†–µ–π—Ç–∏–Ω–≥ IMDb: 8.8\nüé• –†–µ–∂–∏—Å–µ—Ä: Christopher Nolan\nüé≠ –ê–∫—Ç–æ—Ä–∏: Leonardo DiCaprio, Joseph Gordon-Levitt\nüìö –ñ–∞–Ω—Ä: Action, Sci-Fi\nüìù –û–ø–∏—Å: A thief who steals corporate secrets through the use of dream-sharing technology...\n‚ñ∂Ô∏è –¢—Ä–µ–π–ª–µ—Ä –Ω–∞ YouTube: https://www.youtube.com/results?search_query=Inception+trailer"
        )
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –±—É–ª–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è (–ø–æ—Å—Ç–µ—Ä —Ñ—ñ–ª—å–º—É)
        bot.send_photo.assert_called_with(
            message.chat.id,
            "https://link_to_poster.jpg",
            caption="üé¨ –ù–∞–∑–≤–∞: Inception\nüìÖ –†—ñ–∫: 2010\n‚≠ê –†–µ–π—Ç–∏–Ω–≥ IMDb: 8.8\nüé• –†–µ–∂–∏—Å–µ—Ä: Christopher Nolan\nüé≠ –ê–∫—Ç–æ—Ä–∏: Leonardo DiCaprio, Joseph Gordon-Levitt\nüìö –ñ–∞–Ω—Ä: Action, Sci-Fi\nüìù –û–ø–∏—Å: A thief who steals corporate secrets through the use of dream-sharing technology...\n‚ñ∂Ô∏è –¢—Ä–µ–π–ª–µ—Ä –Ω–∞ YouTube: https://www.youtube.com/results?search_query=Inception+trailer"
        )

    @patch('bot.requests.get')  # –ú–æ–∫–∞—î–º–æ HTTP-–∑–∞–ø–∏—Ç –¥–ª—è —ñ–Ω—à–æ—ó –∫–æ–º–∞–Ω–¥–∏
    def test_search_movies(self, mock_get):
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–æ–∫ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ OMDb API
        mock_response = MagicMock()
        mock_response.json.return_value = {
            "Response": "True",
            "Search": [
                {"Title": "Inception", "Year": "2010", "Poster": "https://link_to_poster.jpg"},
                {"Title": "Interstellar", "Year": "2014", "Poster": "https://link_to_poster2.jpg"}
            ]
        }
        mock_get.return_value = mock_response

        # –°–∏–º—É–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        message = MagicMock()
        message.text = '/search sci-fi'
        message.from_user.id = 12345
        message.chat.id = 12345

        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É /search
        bot.search_movies(message)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –±—É–≤ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ñ—ñ–ª—å–º—É
        bot.reply_to.assert_any_call(
            message,
            "üé¨ –ù–∞–∑–≤–∞: Inception\nüìÖ –†—ñ–∫: 2010\nüìö –ñ–∞–Ω—Ä: Sci-Fi\n"
        )
        bot.reply_to.assert_any_call(
            message,
            "üé¨ –ù–∞–∑–≤–∞: Interstellar\nüìÖ –†—ñ–∫: 2014\nüìö –ñ–∞–Ω—Ä: Sci-Fi\n"
        )

    def test_language_change(self):
        # –°–∏–º—É–ª—é—î–º–æ –∑–º—ñ–Ω—É –º–æ–≤–∏ –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É
        message = MagicMock()
        message.text = '/lang_en'
        message.from_user.id = 12345
        bot.set_language_english(message)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–º—ñ–Ω–∏–ª–∞—Å—è –º–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É
        self.assertEqual(bot.user_languages[12345], 'en')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        bot.reply_to.assert_called_with(message, "Language set to English.")
        
        # –¢–µ–ø–µ—Ä –∑–º—ñ–Ω—é—î–º–æ –º–æ–≤—É –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É
        bot.set_language_ukrainian(message)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–º—ñ–Ω–∏–ª–∞—Å—è –º–æ–≤–∞ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É
        self.assertEqual(bot.user_languages[12345], 'uk')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        bot.reply_to.assert_called_with(message, "–ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É.")

if __name__ == '__main__':
    unittest.main()
