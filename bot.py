import telebot  # –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Telegram Bot API
import requests  # –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è HTTP-–∑–∞–ø–∏—Ç—ñ–≤
from telebot import types  # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç–∏–ø–∞–º–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä —ñ –∫–Ω–æ–ø–æ–∫ —É Telegram
from urllib.parse import quote  # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–¥—É–≤–∞–Ω–Ω—è URL-–∑–∞–ø–∏—Ç—ñ–≤

# –¢–æ–∫–µ–Ω API –¥–ª—è Telegram –±–æ—Ç–∞
API_TOKEN = '7538748283:AAF04wzxWHcUa_5hdRI2kcX452v8iTARS3U'
# –ö–ª—é—á API –¥–ª—è OMDb
OMDB_API_KEY = '5f4fe9dc'

# –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN)

# –ú–æ–≤–∞ –±–æ—Ç–∞ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_languages = {}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_first_name(message):
    return message.from_user.first_name if message.from_user.first_name else "–¥—Ä—É–≥"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–æ—é /help
def start_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    help_button = types.KeyboardButton('/help')
    keyboard.add(help_button)
    return keyboard

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
def language_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    english_button = types.KeyboardButton('/lang_en')
    ukrainian_button = types.KeyboardButton('/lang_uk')
    keyboard.add(english_button, ukrainian_button)
    return keyboard

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_name = get_user_first_name(message)
    user_languages.setdefault(message.from_user.id, 'uk')  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
    keyboard = start_keyboard()
    bot.reply_to(message, f"–ü—Ä–∏–≤—ñ—Ç, {user_name}! \n"
                          "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏.", reply_markup=keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help
@bot.message_handler(commands=['help'])
def send_help(message):
    user_name = get_user_first_name(message)
    language = user_languages.get(message.from_user.id, 'uk')
    if language == 'uk':
        help_text = ("–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                     "/start - –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —ñ –æ—Å–Ω–æ–≤–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó\n"
                     "/find <–Ω–∞–∑–≤–∞ —Ñ—ñ–ª—å–º—É> - –ó–Ω–∞–π—Ç–∏ —Ñ—ñ–ª—å–º –∑–∞ –Ω–∞–∑–≤–æ—é\n"
                     "/search <–∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ> - –ó–Ω–∞–π—Ç–∏ —Ñ—ñ–ª—å–º–∏ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
                     "/genre <–∂–∞–Ω—Ä> - –ó–Ω–∞–π—Ç–∏ —Ñ—ñ–ª—å–º–∏ –∑–∞ –∂–∞–Ω—Ä–æ–º\n"
                     "/lang_en - –í–∏–±—Ä–∞—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –º–æ–≤—É")
    else:
        help_text = ("Available commands:\n"
                     "/start - Greeting and basic instructions\n"
                     "/find <movie title> - Find a movie by title\n"
                     "/search <keyword> - Find movies by keyword\n"
                     "/genre <genre> - Find movies by genre\n"
                     "/lang_uk - Switch to Ukrainian language")
    bot.reply_to(message, help_text)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /find
@bot.message_handler(commands=['find'])
def find_movie(message):
    user_name = get_user_first_name(message)
    language = user_languages.get(message.from_user.id, 'uk')
    try:
        search_query = message.text.split(' ', 1)[1]
    except IndexError:
        if language == 'uk':
            bot.reply_to(message, f"–ë—É–¥—å –ª–∞—Å–∫–∞, {user_name}, –Ω–∞–¥–∞–π—Ç–µ –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /find.")
        else:
            bot.reply_to(message, f"Please provide the movie title after the /find command, {user_name}.")
        return

    # –ö–æ–¥—É—î–º–æ –∑–∞–ø–∏—Ç –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ —Å–∏–º–≤–æ–ª–∞–º–∏
    encoded_query = quote(search_query)
    url = f'http://www.omdbapi.com/?t={encoded_query}&apikey={OMDB_API_KEY}'
    response = requests.get(url)
    data = response.json()

    if data.get('Response') == 'True':
        title = data.get('Title')
        year = data.get('Year')
        rating = data.get('imdbRating')
        director = data.get('Director')
        actors = data.get('Actors')
        genre = data.get('Genre')  # –î–æ–¥–∞—î–º–æ –∂–∞–Ω—Ä —Ñ—ñ–ª—å–º—É
        overview = data.get('Plot')
        poster = data.get('Poster')
        trailer_url = f"https://www.youtube.com/results?search_query={title}+trailer"

        response_message = (f"üé¨ –ù–∞–∑–≤–∞: {title}\n"
                            f"üìÖ –†—ñ–∫: {year}\n"
                            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ IMDb: {rating}\n"
                            f"üé• –†–µ–∂–∏—Å–µ—Ä: {director}\n"
                            f"üé≠ –ê–∫—Ç–æ—Ä–∏: {actors}\n"
                            f"üìö –ñ–∞–Ω—Ä: {genre}\n"  # –î–æ–¥–∞—î–º–æ –∂–∞–Ω—Ä —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                            f"üìù –û–ø–∏—Å: {overview}\n"
                            f"‚ñ∂Ô∏è –¢—Ä–µ–π–ª–µ—Ä –Ω–∞ YouTube: {trailer_url}")
        if poster != 'N/A':
            bot.send_photo(message.chat.id, poster, caption=response_message)
        else:
            bot.reply_to(message, response_message)
    else:
        if language == 'uk':
            bot.reply_to(message, f"–§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, {user_name}.")
        else:
            bot.reply_to(message, f"Movie not found, {user_name}.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /search
@bot.message_handler(commands=['search'])
def search_movies(message):
    user_name = get_user_first_name(message)
    language = user_languages.get(message.from_user.id, 'uk')
    try:
        search_query = message.text.split(' ', 1)[1]
    except IndexError:
        if language == 'uk':
            bot.reply_to(message, f"–ë—É–¥—å –ª–∞—Å–∫–∞, {user_name}, –Ω–∞–¥–∞–π—Ç–µ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /search.")
        else:
            bot.reply_to(message, f"Please provide the keyword after the /search command, {user_name}.")
        return

    # –ö–æ–¥—É—î–º–æ –∑–∞–ø–∏—Ç –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ —Å–∏–º–≤–æ–ª–∞–º–∏
    encoded_query = quote(search_query)
    url = f'http://www.omdbapi.com/?s={encoded_query}&apikey={OMDB_API_KEY}'
    response = requests.get(url)
    data = response.json()

    if data.get('Response') == 'True':
        movies = data.get('Search')
        if movies:
            for movie in movies:
                movie_title = movie.get('Title')
                movie_year = movie.get('Year')
                movie_poster = movie.get('Poster')

                # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ñ—ñ–ª—å–º—É, –≤–∫–ª—é—á–∞—é—á–∏ –∂–∞–Ω—Ä
                movie_encoded_title = quote(movie_title)
                movie_url = f'http://www.omdbapi.com/?t={movie_encoded_title}&apikey={OMDB_API_KEY}'
                movie_response = requests.get(movie_url)
                movie_data = movie_response.json()

                if movie_data.get('Response') == 'True':
                    genre = movie_data.get('Genre', '–ù–µ–≤—ñ–¥–æ–º–æ')  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∂–∞–Ω—Ä—É
                    response_message = (f"üé¨ –ù–∞–∑–≤–∞: {movie_title}\n"
                                        f"üìÖ –†—ñ–∫: {movie_year}\n"
                                        f"üìö –ñ–∞–Ω—Ä: {genre}\n")
                    if movie_poster != 'N/A':
                        bot.send_photo(message.chat.id, movie_poster, caption=response_message)
                    else:
                        bot.reply_to(message, response_message)
                else:
                    if language == 'uk':
                        bot.reply_to(message, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ—ñ–ª—å–º '{movie_title}', {user_name}.")
                    else:
                        bot.reply_to(message, f"Failed to retrieve information about '{movie_title}', {user_name}.")
        else:
            if language == 'uk':
                bot.reply_to(message, f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Ñ—ñ–ª—å–º—É, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î '{search_query}', {user_name}.")
            else:
                bot.reply_to(message, f"No movies found matching '{search_query}', {user_name}.")
    else:
        if language == 'uk':
            bot.reply_to(message, f"–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ—à—É–∫—É —Ñ—ñ–ª—å–º—ñ–≤, {user_name}.")
        else:
            bot.reply_to(message, f"Something went wrong while searching for movies, {user_name}.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /genre
@bot.message_handler(commands=['genre'])
def search_by_genre(message):
    user_name = get_user_first_name(message)
    language = user_languages.get(message.from_user.id, 'uk')
    try:
        genre_query = message.text.split(' ', 1)[1]
    except IndexError:
        if language == 'uk':
            bot.reply_to(message, f"–ë—É–¥—å –ª–∞—Å–∫–∞, {user_name}, –Ω–∞–¥–∞–π—Ç–µ –∂–∞–Ω—Ä –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /genre.")
        else:
            bot.reply_to(message, f"Please provide the genre after the /genre command, {user_name}.")
        return

    # –ö–æ–¥—É—î–º–æ –∑–∞–ø–∏—Ç –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ —Å–∏–º–≤–æ–ª–∞–º–∏
    encoded_query = quote(genre_query)
    url = f'http://www.omdbapi.com/?s={encoded_query}&apikey={OMDB_API_KEY}'
    response = requests.get(url)
    data = response.json()

    if data.get('Response') == 'True':
        movies = data.get('Search')
        if movies:
            for movie in movies:
                movie_title = movie.get('Title')
                movie_year = movie.get('Year')
                movie_poster = movie.get('Poster')

                # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ñ—ñ–ª—å–º—É, –≤–∫–ª—é—á–∞—é—á–∏ –∂–∞–Ω—Ä
                movie_encoded_title = quote(movie_title)
                movie_url = f'http://www.omdbapi.com/?t={movie_encoded_title}&apikey={OMDB_API_KEY}'
                movie_response = requests.get(movie_url)
                movie_data = movie_response.json()

                if movie_data.get('Response') == 'True':
                    genre = movie_data.get('Genre', '–ù–µ–≤—ñ–¥–æ–º–æ')  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∂–∞–Ω—Ä—É
                    if genre_query.lower() in genre.lower():
                        response_message = (f"üé¨ –ù–∞–∑–≤–∞: {movie_title}\n"
                                            f"üìÖ –†—ñ–∫: {movie_year}\n"
                                            f"üìö –ñ–∞–Ω—Ä: {genre}\n")
                        if movie_poster != 'N/A':
                            bot.send_photo(message.chat.id, movie_poster, caption=response_message)
                        else:
                            bot.reply_to(message, response_message)
                else:
                    if language == 'uk':
                        bot.reply_to(message, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ—ñ–ª—å–º '{movie_title}', {user_name}.")
                    else:
                        bot.reply_to(message, f"Failed to retrieve information about '{movie_title}', {user_name}.")
        else:
            if language == 'uk':
                bot.reply_to(message, f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Ñ—ñ–ª—å–º—É, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î '{genre_query}', {user_name}.")
            else:
                bot.reply_to(message, f"No movies found matching '{genre_query}', {user_name}.")
    else:
        if language == 'uk':
            bot.reply_to(message, f"–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ—à—É–∫—É —Ñ—ñ–ª—å–º—ñ–≤, {user_name}.")
        else:
            bot.reply_to(message, f"Something went wrong while searching for movies, {user_name}.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /lang_en
@bot.message_handler(commands=['lang_en'])
def set_language_english(message):
    user_languages[message.from_user.id] = 'en'
    bot.reply_to(message, "Language set to English.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /lang_uk
@bot.message_handler(commands=['lang_uk'])
def set_language_ukrainian(message):
    user_languages[message.from_user.id] = 'uk'
    bot.reply_to(message, "–ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É.")

# –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True)
